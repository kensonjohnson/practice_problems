// Given a circular integer array nums of length n, return the maximum possible sum of a
// non-empty subarray of nums.

// A circular array means the end of the array connects to the beginning of the array.
// Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element
// of nums[i] is nums[(i - 1 + n) % n].

// A subarray may only include each element of the fixed buffer nums at most once.
// Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist
// i <= k1, k2 <= j with k1 % n == k2 % n.

// Example 1:
const nums1 = [1, -2, 3, -2];
// Output: 3
// Explanation: Subarray [3] has maximum sum 3.

// Example 2:
const nums2 = [5, -3, 5];
// Output: 10
// Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.

// Example 3:
const nums3 = [-3, -2, -3];
// Output: -2
// Explanation: Subarray [-2] has maximum sum -2.

const nums4 = [
  114, 997, -702, 353, -455, -740, 109, 466, -959, 817, 445, 684, -248, 860,
  -272, -326, 252, -859, 904, 103, 621, 73, -561, 375, 860, 617, -281, -306,
  154, -165, -994, -605, 951, 604, 792, 773, -868, -129, -588, -788, 618, 352,
  -647, 445, -678, -234, -600, -628, -505, 337, 691, -566, -96, 333, -412, 23,
  -303, -905, -685, -918, -880, 391, -813, 570, 937, 506, -68, -929, -274, 104,
  278, -262, -61, 467, 81, 692, -784, -196, 583, 346, 532, -761, -366, 755,
  -789, 579, 145, 936, -16, -869, -560, 553, -219, -607, 957, -930, -418, 200,
  354, -376, -105, -517, 781, -893, -629, 971, 332, -819, 680, -559, -965, -575,
  630, 848, 8, -154, -161, 83, -723, 358, -968, 786, -324, -99, 622, 912, 856,
  537, -198, -372, -684, 984, 368, -572, -631, -556, 557, 9, -675, 61, -276,
  -995, 33, -277, 48, -85, -891, 819, 935, 331, 778, 754, 186, 783, 860, -885,
  -465, -913, 986, -947, 288, 767, 596, -870, -62, 54, -597, -80, -684, -882,
  385, 852, -81, 213, 652, 650, -597, 922, 815, -340, 625, -225, 983, 451, 213,
  976, -902, -287, 543, -163, 744, -764, -450, -68, -260, -593, -971, 34, -89,
  145, -108, 433, 712, 743, -720, -126, -31, -101, 51, -382, -348, -600, 677,
  682, 493, -967, -511, 704, -723, 658, 121, -358, -632, 858, 628, 524, 51,
  -381, 570, -931, -923, -979, -42, 138, -619, -638, -677, -769, 332, 756, 992,
  -767, -454, -418, -476, 350, -31, 658, -622, -420, -541, -74, -513, 483, 958,
  -52, 908, 243, 827, -431, 211, -471, 325, -745, 765, 136, 947, -590, -439,
  776, 478, 380, -410, 187, -937, -905, -25, -38, -634, -305, -744, 586, -986,
  -296, -266, -20, -342, 986, 434, -815, -855, 732, -113, 145, 480, 482, 322,
  407, -317, 32, 957, -40, 17, 59, 494, -463, -966, -964, 376, 912, 533, -20,
  292, -940, -597, 385, 180, -431, 547, 58, -806, 826, -622, 513, -19, -547,
  306, 493, 389, 690, -270, -658, 503, -658, 549, 753, -1000, 101, -775, -38,
  -737, -593, -734, 822, -649, 832, -723, -94, 42, -214, 495, 245, 518, -398,
  799, 133, -850, 422, 483, 399, 453, 765, -385, 352, 755, -622, -588, 751, 451,
  952, -511, 365, -989, -590, -227, 306, 862, 188, -779, -512, 361, 197, 202,
  851, 534, -44, 378, 183, 957, -418, 925, 399, 133, -347, 518, -935, 39, 240,
  -745, 168, 596, 361, -769, 311, 612, 749, 588, 967, -59, 332, 691, 351, 787,
  90, 883, 183, 501, -546, 314, -541, 193, 626, -963, 757, -843, -837, -229,
  -101, -351, -825, -568, 373, 59, 802, 944, -657, -333, 520, 113, 961, -39,
  986, 275, 855, -282, -604, -700, 434, 740, -255, 927, 775, 47, -207, -638,
  -724, -750, 952, 76, -697, 792, -252, -940, -776, -124, -303, 318, -565, -456,
  558, -816, -559, -550, 769, -581, -541, 770, 874, 803, 376, 370, -114, -223,
  -856, -421, -288, 206, -789, 641, 327, 920, 612, 188, 491, -837, -748, 335,
  396, 307, -736, 470, -603, -396, -608, 341, 433, -648, -353, -527, -287, 541,
  652, -903, 120, 38, 355, -176, -241, 118, -563, 693, -457, -771, -411, -469,
  -910, 840, -409, -340, -821, -592, 781, -498, -268, 446, -53, -464, 594, 591,
  264, -137, 904, 800, -620, 848, -936, -101, -1000, 795, -151, 545, -387, -890,
  325, -642, -79, 443, 224, -965, 317, -966, 127, -762, 758, -862, -964, 44,
  -863, -225, -426, 914, 294, 257, 884, -923, -161, 502, -714, -348, -864, 704,
  360, 330, -897, 28, 626, -414, -823, 14, -571, -708, -859, -805, 758, 776,
  -460, -45, -898, 537, 824, 974, 392, -567, 535, 325, -218, -521, 135, 167,
  631, -470, -190, 674, -2, 103, -529, -416, -254, 63, -943, -900, -11, -566,
  691, -829, 972, -664, 624, -748, 693, -540, 699, -744, -669, 187, -977, -49,
  368, 243, 64, 682, 824, -945, 965, -580, 387, 887, -506, -105, 6, -20, -618,
  -846, -36, 366, -807, 393, -394, 821, -977, -904, 83, -264, 893, 937, 600,
  251, 610, -523, -344, -358, -695, -571, -305, 990, -643, -137, -241, 196,
  -463, 524, -521, -628, 530, -653, -163, -497, -609, -882, -345, -171, -843,
  -67, 46, -43, 117, 429, -540, -808, -866, 332, 170, 295, 481, 811, -937, 663,
  -201, -905, -966, -337, -82, -856, -986, -712, -900, -895, -39, 300, 921, 405,
  171, -817, -499, 306, -764, 333, -439, 795, -32, -539, -405, -971, -208, -33,
  -74, 982, -281, -367, -130, 204, 878, 114, 42, -156, 861, -376, 951, -122,
  356, -93, 806, -773, -822, -351, -274, -824, 667, -924, -776, -327, 547, -892,
  442, -607, 925, -879, 677, -739, -817, 650, 334, 20, -869, -384, -238, 658,
  563, 518, -515, -150, 700, -167, -862, -239, 967, 201, 966, 494, -191, 3,
  -934, 751, -623, -480, 154, -489, 655, -506, 413, -463, -344, -161, -401, 883,
  -544, 757, 529, 138, 436, -499, 219, 187, 1000, -88, 601, 550, 800, -343, 90,
  975, -893, -64, 503, 914, 946, 795, -660, -685, 417, 158, -285, -456, 838,
  938, -323, 453, -103, -456, 632, -473, -198, 123, 865, 963, 949, -253, -808,
  -658, 625, -771, -916, 536, 231, -226, -850, -31, 743, -662, 132, -158, 138,
  -713, -779, 149, 25, 515, 943, 933, -932, -385, -117, 327, -384, -374, 636,
  221, 967, 606, 987, 256, 362, -844, 252, 944, 343, -972, -823, -118, -40,
  -113, 385, 97, 660, -804, 494, 427, -530, 236, 427, -741, -143, 155, -482,
  -695, -315, -893, -775, -80, -14, 585, -651, 654, 481, 914, -287, -179, -978,
  -607, 726, -604, 994, -222, 109, -75, -258, -202, -341, -116, -788, -984, 726,
  67, 330, -851, -388, 482, 202, -309, 540, 153, 940, 876, -372, -843, 20, -933,
  959, 512, 728, -992, -666, -787, 934, 802, 678, 609, -362, 475, -476, -360,
  -888, -830, 213, -948, 840, 675, -937, 151, 586, 752, 485, 160, 960, 346, 818,
  830, -484, 26, -78, -80, -683, -99, -660, 873, 363, 717, 432, -261, -189, 904,
  955, -297, 560, -120, -931, -27, -46, -253, -281,
];

// function takes in array, returns number
/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubarraySumCircular = function (nums) {
  const n = nums.length;
  let curMax = Number.NEGATIVE_INFINITY;
  let maxSum = Number.NEGATIVE_INFINITY;
  let curMin = Number.POSITIVE_INFINITY;
  let minSum = Number.POSITIVE_INFINITY;
  let sum = 0;

  nums.forEach((num) => {
    curMax = Math.max(curMax + num, num);
    maxSum = Math.max(maxSum, curMax);
    curMin = Math.min(curMin + num, num);
    minSum = Math.min(minSum, curMin);
    sum += num;
  });

  return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;
};

console.log(maxSubarraySumCircular(nums1));
console.log(maxSubarraySumCircular(nums2));
console.log(maxSubarraySumCircular(nums3));
console.log(maxSubarraySumCircular(nums4));
